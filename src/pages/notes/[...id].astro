---
import { getCollection, render } from "astro:content";
import { twMerge } from "tailwind-merge";

import Layout from "../../layouts/Layout.astro";
import { interweave } from "../../lib/arrays";
import { buildContentTree, buildCrumbs, urlifyPostId } from "../../lib/content-trees";
import * as components from "../../lib/remark/mdx-components";
import { getContentNodeHref } from "../../lib/content-trees";
import { getPrevNextInTree } from "../../lib/trees";
import ArrowLeft from "phosphor-astro/ArrowLeft.astro";
import ArrowRight from "phosphor-astro/ArrowRight.astro";
import BookOpen from "phosphor-astro/BookOpen.astro";

export async function getStaticPaths() {
    const notes = await getCollection("notes", ({ data }) => !import.meta.env.PROD || !data.draft);
    const tree = buildContentTree(notes);

    return notes
        .filter((post) => !import.meta.env.PROD || !post.data.draft)
        .map((post) => {
            return {
                params: { id: urlifyPostId(post.id) },
                props: {
                    post,
                    tree,
                },
            };
        });
}

const { post, tree } = Astro.props;

const key = urlifyPostId(post.id);
const crumbs = buildCrumbs(tree, urlifyPostId(post.id));
const { prev, next } = getPrevNextInTree(tree, (n) => n.key === key);

const words = post.body?.split(" ").length ?? 0;
const wpm = 120;
const estimatedReadingTime = words / wpm;

const { Content, remarkPluginFrontmatter } = await render(post);
---

<Layout
    metadata={{
        title: post.data.title,
        description: remarkPluginFrontmatter.description,
    }}
>
    <article
        class={twMerge(
            "prose dark:prose-invert hyphens-auto text-justify",
            "prose-headings:font-mono prose-headings:text-left prose-headings:leading-tight",
            "not-lg:prose-h1:text-4xl",
            "prose-a:text-blue-500 prose-a:underline-offset-3 prose-a:decoration-[2px]"
        )}
    >
        {
            crumbs && crumbs.length > 1 && (
                <span class="not-prose font-mono text-neutral-500 dark:text-neutral-400">
                    {interweave(
                        crumbs
                            .map((c) => (
                                <a
                                    href={getContentNodeHref(c)}
                                    class="inline-block hover:underline decoration-2 underline-offset-2"
                                >
                                    {c.title?.trim()}
                                </a>
                            ))
                            .slice(0, -1),
                        (e, i) => (
                            <span class="mx-2 text-neutral-300 dark:text-neutral-600">/</span>
                        )
                    )}
                </span>
            )
        }
        <h1 class="mb-6 font-bold text-5xl leading-14 text-left">{post.data.title}</h1>
        {
            prev && (
                <a
                    class="not-prose text-sm font-mono text-neutral-500 flex flex-row gap-2 items-center"
                    href={getContentNodeHref(prev)}
                >
                    <ArrowLeft class="size-5" />
                    <span>{prev.title}</span>
                </a>
            )
        }

        <p class="flex flex-row items-center gap-2 font-mono text-sm text-neutral-600 dark:text-neutral-400">
            <BookOpen class="size-5" />
            Estimated reading time: {Math.ceil(estimatedReadingTime)} min
        </p>

        <Content components={{ ...components }} />

        {
            next && (
                <a
                    class="mt-8 not-prose text-sm font-mono text-neutral-500 flex flex-row gap-2 items-center"
                    href={getContentNodeHref(next)}
                >
                    <span>{next.title}</span>
                    <ArrowRight class="size-5" />
                </a>
            )
        }
    </article>
</Layout>
